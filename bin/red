#!/usr/bin/env ruby
# Red's command line Ruby-to-JS conversion executable.
# 
# Copyright (c) 2008 Jesse Sielaff.

require 'rubygems' rescue nil
require 'red'
require 'red/executable'
require 'red/version'
require 'optparse'
require 'ftools'

include Red

parser = OptionParser.new do |opts|
  opts.banner = RED_MESSAGES[:banner]
  opts.separator ""
  opts.on('-h',"--help","Show this help message.")                                    { puts opts; exit }
  opts.on('-r',"--rails","Add Red plugin to ./vendor/plugins.")                       { build_red_plugin_for_rails }
  opts.on('-s',"--string=RUBY_STRING","Translate a single string to JavaScript.")     { |string| Red.init && direct_translate(string) }
  opts.on('-t',"--test","Translate a file to JavaScript without writing a .js file.") { ARGV.push(:test) }
  opts.on('-v',"--version","Print version number.")                                   { puts Red::VERSION::STRING; exit }
  begin
    opts.parse!(ARGV)
  rescue OptionParser::InvalidOption => e
    puts RED_MESSAGES[:invalid] % [e.message]; exit
  rescue OptionParser::MissingArgument => e
    puts RED_MESSAGES[:missing] % [e.message]; exit
  end
end

class << Red
  dry_run = (ARGV[1] ? ARGV.pop : true) if Red.init && ARGV.last == :test
  ARGV.map {|filename| self.convert_red_file_to_js(filename, dry_run)}
end && exit unless ARGV.empty?
puts RED_MESSAGES[:usage]
